{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/edwardlam/Desktop/Mediconcen/client/components/Login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\nvar Login = function Login(_ref) {\n  var setNeedRegister = _ref.setNeedRegister,\n      setToken = _ref.setToken,\n      setIsAuthenticated = _ref.setIsAuthenticated;\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var email = formData.email,\n      password = formData.password;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errors = _useState4[0],\n      setErrors = _useState4[1];\n\n  var login = function login() {\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var body = {\n      email: email,\n      password: password\n    };\n    body = JSON.stringify(body);\n\n    (function _callee() {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.post(\"http://localhost:5000/api/clinics/login\", body, config));\n\n            case 3:\n              res = _context.sent;\n              setToken(res.data);\n              setIsAuthenticated(true);\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              setErrors(_context.t0.response.data.errors);\n              setToken(\"\");\n              setIsAuthenticated(false);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    })();\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    contentContainerStyle: styles.authForm,\n    resetScrollToCoords: {\n      x: 0,\n      y: 0\n    },\n    scrollEnabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Login to Your Clinic Account\"), errors.length > 0 && errors.map(function (error, index) {\n    return React.createElement(Text, {\n      key: index,\n      style: styles.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, error.msg);\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Email:\"), React.createElement(TextInput, {\n    autoCapitalize: \"none\",\n    style: styles.mediumFont,\n    placeholder: \"Please enter account email...\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        email: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      passwordField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Password:\"), React.createElement(TextInput, {\n    style: styles.mediumFont,\n    secureTextEntry: true,\n    placeholder: \"Please enter account password...\",\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        password: text\n      }));\n    },\n    ref: function ref(input) {\n      passwordField = input;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      marginLeft: 0\n    }),\n    onPress: login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontSize: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Login\")), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.mediumFont,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Don't already have an account?\"), React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      marginLeft: 0,\n      backgroundColor: \"coral\"\n    }),\n    onPress: function onPress() {\n      setNeedRegister(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontSize: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Register\"))));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"dodgerblue\",\n    color: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 100,\n    height: 45,\n    margin: 20\n  },\n  authForm: {\n    margin: 50\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n    marginVertical: 30\n  },\n  fieldTitle: {\n    fontSize: 30\n  },\n  mediumFont: {\n    fontSize: 20,\n    paddingVertical: 20\n  },\n  errorMsg: {\n    color: \"red\",\n    marginVertical: 10\n  }\n});\nexport default Login;","map":{"version":3,"sources":["/Users/edwardlam/Desktop/Mediconcen/client/components/Login.js"],"names":["axios","React","useState","KeyboardAwareScrollView","Login","setNeedRegister","setToken","setIsAuthenticated","email","password","formData","setFormData","errors","setErrors","login","config","headers","body","JSON","stringify","post","res","data","response","styles","authForm","x","y","title","length","map","error","index","errorMsg","msg","fieldTitle","mediumFont","text","passwordField","focus","input","button","marginLeft","color","fontSize","backgroundColor","StyleSheet","create","alignItems","justifyContent","width","height","margin","fontWeight","marginVertical","paddingVertical"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n// import uuid from \"react-native-uuid\";\nimport React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  View,\n  Text,\n  TouchableOpacity,\n  TextInput,\n  KeyboardAvoidingView,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\nconst Login = ({ setNeedRegister, setToken, setIsAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const { email, password } = formData;\n\n  const [errors, setErrors] = useState([]);\n\n  const login = () => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    let body = { email, password };\n    body = JSON.stringify(body);\n    (async () => {\n      try {\n        const res = await axios.post(\n          \"http://localhost:5000/api/clinics/login\",\n          body,\n          config\n        );\n        setToken(res.data);\n        setIsAuthenticated(true);\n      } catch (err) {\n        setErrors(err.response.data.errors);\n        setToken(\"\");\n        setIsAuthenticated(false);\n      }\n    })();\n  };\n\n  return (\n    <KeyboardAwareScrollView\n      contentContainerStyle={styles.authForm}\n      resetScrollToCoords={{ x: 0, y: 0 }}\n      scrollEnabled={true}\n    >\n      <Text style={styles.title}>Login to Your Clinic Account</Text>\n      {errors.length > 0 &&\n        errors.map((error, index) => {\n          return (\n            <Text key={index} style={styles.errorMsg}>\n              {error.msg}\n            </Text>\n          );\n        })}\n      <Text style={styles.fieldTitle}>Email:</Text>\n      <TextInput\n        autoCapitalize={\"none\"}\n        style={styles.mediumFont}\n        placeholder=\"Please enter account email...\"\n        value={email}\n        onChangeText={(text) => setFormData({ ...formData, email: text })}\n        onSubmitEditing={() => {\n          passwordField.focus();\n        }}\n      />\n      <Text style={styles.fieldTitle}>Password:</Text>\n      <TextInput\n        style={styles.mediumFont}\n        secureTextEntry={true}\n        placeholder=\"Please enter account password...\"\n        value={password}\n        onChangeText={(text) => setFormData({ ...formData, password: text })}\n        ref={(input) => {\n          passwordField = input;\n        }}\n      />\n      <TouchableOpacity\n        style={{ ...styles.button, marginLeft: 0 }}\n        onPress={login}\n      >\n        <Text style={{ color: \"white\", fontSize: 20 }}>Login</Text>\n      </TouchableOpacity>\n      <View>\n        <Text style={styles.mediumFont}>Don't already have an account?</Text>\n        <TouchableOpacity\n          style={{ ...styles.button, marginLeft: 0, backgroundColor: \"coral\" }}\n          onPress={() => {\n            setNeedRegister(true);\n          }}\n        >\n          <Text style={{ color: \"white\", fontSize: 20 }}>Register</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAwareScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"dodgerblue\",\n    color: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 100,\n    height: 45,\n    margin: 20,\n  },\n\n  authForm: {\n    margin: 50,\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n    marginVertical: 30,\n  },\n  fieldTitle: {\n    fontSize: 30,\n  },\n  mediumFont: {\n    fontSize: 20,\n    paddingVertical: 20,\n  },\n  errorMsg: {\n    color: \"red\",\n    marginVertical: 10,\n  },\n});\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}