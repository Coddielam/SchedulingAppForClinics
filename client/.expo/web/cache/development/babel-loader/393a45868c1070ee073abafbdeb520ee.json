{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/edwardlam/Desktop/Mediconcen/client/components/Register.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\nvar Registration = function Registration(_ref) {\n  var setNeedRegister = _ref.setNeedRegister,\n      setToken = _ref.setToken,\n      setIsAuthenticated = _ref.setIsAuthenticated;\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\",\n    confirm_password: \"\",\n    clinic_name: \"\",\n    phone_num: \"\",\n    address: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var email = formData.email,\n      password = formData.password,\n      confirm_password = formData.confirm_password,\n      clinic_name = formData.clinic_name,\n      phone_num = formData.phone_num,\n      address = formData.address;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errors = _useState4[0],\n      setErrors = _useState4[1];\n\n  var register = function register() {\n    if (password !== confirm_password) {\n      return setErrors([{\n        msg: \"Password confirmation did not match\"\n      }]);\n    }\n\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var body = {\n      email: email,\n      password: password,\n      clinic_name: clinic_name,\n      phone_num: phone_num,\n      address: address\n    };\n    body = JSON.stringify(body);\n    console.log(body);\n\n    (function _callee() {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.post(\"http://localhost:5000/api/clinics/register\", body, config));\n\n            case 3:\n              res = _context.sent;\n              setToken(res.data);\n              setIsAuthenticated(true);\n              _context.next = 14;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.response.data.errors);\n              setErrors(_context.t0.response.data.errors);\n              setToken(\"\");\n              setIsAuthenticated(false);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    })();\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    contentContainerStyle: styles.authForm,\n    resetScrollToCoords: {\n      x: 0,\n      y: 0\n    },\n    scrollEnabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Register for A Clinic Account\"), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Email:\"), React.createElement(TextInput, {\n    autoCapitalize: \"none\",\n    style: styles.mediumFont,\n    keyboardType: \"email-address\",\n    placeholder: \"Please enter an email...\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        email: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      passwordField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Password:\"), React.createElement(TextInput, {\n    autoCapitalize: \"none\",\n    ref: function ref(input) {\n      passwordField = input;\n    },\n    style: styles.mediumFont,\n    placeholder: \"Please enter a password...\",\n    value: password,\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        password: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      passwordConfirmField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Password Confirmation:\"), React.createElement(TextInput, {\n    autoCapitalize: \"none\",\n    ref: function ref(input) {\n      passwordConfirmField = input;\n    },\n    style: styles.mediumFont,\n    placeholder: \"Please re-enter a password...\",\n    value: confirm_password,\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        confirm_password: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      clinicNameField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Clinic Name:\"), React.createElement(TextInput, {\n    ref: function ref(input) {\n      clinicNameField = input;\n    },\n    style: styles.mediumFont,\n    placeholder: \"Please enter name of clinic...\",\n    value: clinic_name,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        clinic_name: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      phoneField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Phone Number:\"), React.createElement(TextInput, {\n    ref: function ref(input) {\n      return phoneField = input;\n    },\n    style: styles.mediumFont,\n    placeholder: \"Please enter a phone number...\",\n    keyboardType: \"numeric\",\n    value: phone_num,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        phone_num: text\n      }));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      addressField.focus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.fieldTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Address:\"), React.createElement(TextInput, {\n    ref: function ref(input) {\n      return addressField = input;\n    },\n    style: styles.mediumFont,\n    placeholder: \"Please enter your address...\",\n    value: address,\n    onChangeText: function onChangeText(text) {\n      return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        address: text\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      marginLeft: 0\n    }),\n    onPress: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontSize: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, \"Register\")), errors.length > 0 && errors.map(function (error, index) {\n    return React.createElement(Text, {\n      key: index,\n      style: styles.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, error.msg);\n  }), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.mediumFont,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"Already have an account?\"), React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      marginLeft: 0,\n      backgroundColor: \"coral\"\n    }),\n    onPress: function onPress() {\n      setNeedRegister(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontSize: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, \"Login\"))), React.createElement(View, {\n    style: {\n      height: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"dodgerblue\",\n    color: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 100,\n    height: 45,\n    margin: 20\n  },\n  authForm: {\n    flex: 1,\n    paddingVertical: 20,\n    paddingLeft: 20,\n    paddingRight: 10,\n    paddingTop: 30\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: \"bold\"\n  },\n  fieldTitle: {\n    fontSize: 30,\n    marginVertical: 20\n  },\n  mediumFont: {\n    fontSize: 20,\n    paddingVertical: 5\n  },\n  errorMsg: {\n    color: \"red\",\n    marginVertical: 10\n  }\n});\nexport default Registration;","map":{"version":3,"sources":["/Users/edwardlam/Desktop/Mediconcen/client/components/Register.js"],"names":["axios","React","useState","KeyboardAwareScrollView","Registration","setNeedRegister","setToken","setIsAuthenticated","email","password","confirm_password","clinic_name","phone_num","address","formData","setFormData","errors","setErrors","register","msg","config","headers","body","JSON","stringify","console","log","post","res","data","response","styles","authForm","x","y","height","title","fieldTitle","mediumFont","text","passwordField","focus","input","passwordConfirmField","clinicNameField","phoneField","addressField","button","marginLeft","color","fontSize","length","map","error","index","errorMsg","backgroundColor","StyleSheet","create","alignItems","justifyContent","width","margin","flex","paddingVertical","paddingLeft","paddingRight","paddingTop","fontWeight","marginVertical"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  TouchableOpacity,\n  TextInput,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\nconst Registration = ({ setNeedRegister, setToken, setIsAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirm_password: \"\",\n    clinic_name: \"\",\n    phone_num: \"\",\n    address: \"\",\n  });\n  const {\n    email,\n    password,\n    confirm_password,\n    clinic_name,\n    phone_num,\n    address,\n  } = formData;\n\n  const [errors, setErrors] = useState([]);\n\n  const register = () => {\n    if (password !== confirm_password) {\n      return setErrors([{ msg: \"Password confirmation did not match\" }]);\n    }\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    let body = {\n      email,\n      password,\n      clinic_name,\n      phone_num,\n      address,\n    };\n    body = JSON.stringify(body);\n    console.log(body);\n    (async () => {\n      try {\n        const res = await axios.post(\n          \"http://localhost:5000/api/clinics/register\",\n          body,\n          config\n        );\n        setToken(res.data);\n        setIsAuthenticated(true);\n      } catch (err) {\n        // console.error(err);\n        console.log(err.response.data.errors);\n        setErrors(err.response.data.errors);\n        setToken(\"\");\n        setIsAuthenticated(false);\n      }\n    })();\n  };\n\n  return (\n    <KeyboardAwareScrollView\n      contentContainerStyle={styles.authForm}\n      resetScrollToCoords={{ x: 0, y: 0 }}\n      scrollEnabled={true}\n    >\n      <ScrollView>\n        <View style={{ height: 20 }} />\n        <Text style={styles.title}>Register for A Clinic Account</Text>\n        <Text style={styles.fieldTitle}>Email:</Text>\n        <TextInput\n          autoCapitalize={\"none\"}\n          style={styles.mediumFont}\n          keyboardType=\"email-address\"\n          placeholder=\"Please enter an email...\"\n          value={email}\n          onChangeText={(text) => setFormData({ ...formData, email: text })}\n          onSubmitEditing={() => {\n            passwordField.focus();\n          }}\n        />\n        <Text style={styles.fieldTitle}>Password:</Text>\n        <TextInput\n          autoCapitalize={\"none\"}\n          ref={(input) => {\n            passwordField = input;\n          }}\n          style={styles.mediumFont}\n          placeholder=\"Please enter a password...\"\n          value={password}\n          secureTextEntry={true}\n          onChangeText={(text) => setFormData({ ...formData, password: text })}\n          onSubmitEditing={() => {\n            passwordConfirmField.focus();\n          }}\n        />\n        <Text style={styles.fieldTitle}>Password Confirmation:</Text>\n        <TextInput\n          autoCapitalize={\"none\"}\n          ref={(input) => {\n            passwordConfirmField = input;\n          }}\n          style={styles.mediumFont}\n          placeholder=\"Please re-enter a password...\"\n          value={confirm_password}\n          secureTextEntry={true}\n          onChangeText={(text) =>\n            setFormData({ ...formData, confirm_password: text })\n          }\n          onSubmitEditing={() => {\n            clinicNameField.focus();\n          }}\n        />\n        <Text style={styles.fieldTitle}>Clinic Name:</Text>\n        <TextInput\n          ref={(input) => {\n            clinicNameField = input;\n          }}\n          style={styles.mediumFont}\n          placeholder=\"Please enter name of clinic...\"\n          value={clinic_name}\n          onChangeText={(text) =>\n            setFormData({ ...formData, clinic_name: text })\n          }\n          onSubmitEditing={() => {\n            phoneField.focus();\n          }}\n        />\n        <Text style={styles.fieldTitle}>Phone Number:</Text>\n        <TextInput\n          ref={(input) => (phoneField = input)}\n          style={styles.mediumFont}\n          placeholder=\"Please enter a phone number...\"\n          keyboardType=\"numeric\"\n          value={phone_num}\n          onChangeText={(text) => setFormData({ ...formData, phone_num: text })}\n          onSubmitEditing={() => {\n            addressField.focus();\n          }}\n        />\n        <Text style={styles.fieldTitle}>Address:</Text>\n        <TextInput\n          ref={(input) => (addressField = input)}\n          style={styles.mediumFont}\n          placeholder=\"Please enter your address...\"\n          value={address}\n          onChangeText={(text) => setFormData({ ...formData, address: text })}\n        />\n        <TouchableOpacity\n          style={{ ...styles.button, marginLeft: 0 }}\n          onPress={register}\n        >\n          <Text style={{ color: \"white\", fontSize: 20 }}>Register</Text>\n        </TouchableOpacity>\n        {errors.length > 0 &&\n          errors.map((error, index) => {\n            return (\n              <Text key={index} style={styles.errorMsg}>\n                {error.msg}\n              </Text>\n            );\n          })}\n        <View>\n          <Text style={styles.mediumFont}>Already have an account?</Text>\n          <TouchableOpacity\n            style={{\n              ...styles.button,\n              marginLeft: 0,\n              backgroundColor: \"coral\",\n            }}\n            onPress={() => {\n              setNeedRegister(false);\n            }}\n          >\n            <Text style={{ color: \"white\", fontSize: 20 }}>Login</Text>\n          </TouchableOpacity>\n        </View>\n        <View style={{ height: 100 }} />\n      </ScrollView>\n    </KeyboardAwareScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"dodgerblue\",\n    color: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 100,\n    height: 45,\n    margin: 20,\n  },\n\n  authForm: {\n    flex: 1,\n    paddingVertical: 20,\n    paddingLeft: 20,\n    paddingRight: 10,\n    paddingTop: 30,\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n  },\n  fieldTitle: {\n    fontSize: 30,\n    marginVertical: 20,\n  },\n  mediumFont: {\n    fontSize: 20,\n    paddingVertical: 5,\n  },\n  errorMsg: {\n    color: \"red\",\n    marginVertical: 10,\n  },\n});\n\nexport default Registration;\n"]},"metadata":{},"sourceType":"module"}